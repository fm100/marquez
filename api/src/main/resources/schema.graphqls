scalar UUID
scalar DateTime
scalar Json
scalar NodeId
scalar NodeType
scalar NamespaceName
scalar DatasetName
scalar DatasetType
scalar SourceName
scalar FieldName
scalar FieldType
scalar TagName
scalar JobName
scalar JobType
scalar RunId
scalar RunState

type Query {
  datasets: [Dataset]
  dataset(namespace: String!, name: String!): Dataset
  namespace(name: String!): Namespace
  jobs: [Job]
  job(namespace: String!, name: String): Job
  lineage(nodeId: String!, depth: Int = 10): LineageRoot
}

type LineageRoot {
  graph: [Node]
}

type Node {
  id: NodeId!
  type: NodeType!
  data: NodeData!
  inEdges: [EdgeEntry]
  outEdges: [EdgeEntry]
}

union NodeData = Dataset | Job

type EdgeEntry {
  origin: NodeId!
  destination: NodeId!
}

type Tag {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  description: String

  fields: [DatasetField]
  datasets: [Dataset]
}
type Source {
  type: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  connectionUrl: String
  description: String
  datasets: [Dataset]
}
type RunStateRecord {
  transitionedAt: DateTime
  state: String
  run: Run
}
type Run {
  id: RunId
  createdAt: DateTime
  updatedAt: DateTime
  nominalStartTime: DateTime
  nominalEndTime: DateTime
  state: RunState
  startedAt: DateTime
  endedAt: DateTime
  durationMs: Int
  args: Json
  namespaceName: String
  jobName: String
  jobVersion: UUID
  location: String
  inputVersions: [DatasetVersionId]
  outputVersions: [DatasetVersionId]
  context: Json
  facets: Json
}
type Owner {
  createdAt: DateTime
  name: String
  namespaces: [Namespace]
}
type Namespace {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  description: String
  owners: [Owner]
  currentOwner: Owner
  jobs: [Job]
  datasets: [Dataset]
}
type JobVersion {
  createdAt: DateTime
  updatedAt: DateTime
  location: String
  version: UUID
  jobContext: Json
  latestRun: Run
  job: Job
  inputs: [Dataset]
  outputs: [Dataset]
}
type JobId {
  namespaceName: NamespaceName
  jobName: JobName
}
type Job {
  id: JobId
  type: JobType
  name: JobName
  createdAt: DateTime
  updatedAt: DateTime
  namespace: NamespaceName
  inputs: [DatasetId]
  outputs: [DatasetId]
  location: Json
  context: String
  description: String
  latestRun: Run
}

type DatasetVersionId {
  namespace: NamespaceName
  name: DatasetName
  version: UUID
}
type DatasetVersion {
  createdAt: DateTime
  dataset: Dataset
  version: UUID
  fields: [DatasetField]
  run: Run
}
type DatasetField {
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  dataset: Dataset
  versions: [DatasetVersion]
  tags: [Tag]
}

type DatasetId {
  namespaceName: NamespaceName
  datasetName: DatasetName
}

type Field {
  name: FieldName
  type: FieldType
  tags: [TagName]
  description: String!
}

type Dataset {
  id: DatasetId
  type: DatasetType
  name: DatasetName
  physicalName: DatasetName
  createdAt: DateTime
  updatedAt: DateTime
  namespace: NamespaceName
  sourceName: SourceName
  fields: [Field]
  tags: [TagName]
  lastModifiedAt: DateTime
  description: String
}